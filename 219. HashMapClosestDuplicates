// 219. Contains Duplicate II
// Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

// Input: nums = [1,2,3,1], k = 3
// Output: true

// Input: nums = [1,0,1,1], k = 1
// Output: true

// Input: nums = [1,2,3,1,2,3], k = 2
// Output: false
      
      class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int l = nums.length;
        int d = l+1; // index diferrence
        if(l==1) return false;
        for (int i=0; i<l; i++){
            for (int j=i+1; j<nums.length; j++){
                if (nums[i] == nums[j]) {
                    d = Math.min(Math.abs(i-j), d);
                }                  
            }
        }
        if(d == l+1) return false;
        return (d<=k);
    }
}


class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer, Integer> map=new HashMap<>();
        
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                if(Math.abs(i-map.get(nums[i]))<=k) return true;
            }
            map.put(nums[i],i); // update the new index
        }
        return false;
    }
}
