// 2130. Maximum Twin Sum of a Linked List
// In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

// For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
// The twin sum is defined as the sum of a node and its twin.

// Given the head of a linked list with even length, return the maximum twin sum of the linked list.

// Input: head = [5,4,2,1]
// Output: 6
// Explanation:
// Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.
// There are no other nodes with twins in the linked list.
// Thus, the maximum twin sum of the linked list is 6. 

// Input: head = [4,2,2,3]
// Output: 7
// Explanation:
// The nodes with twins present in this linked list are:
// - Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.
// - Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.
// Thus, the maximum twin sum of the linked list is max(7, 4) = 7. 

// Input: head = [1,100000]
// Output: 100001
// Explanation:
// There is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.
    
class Solution {
    public int pairSum(ListNode head) {
        // if (head.next.next == null)
        //     return head.val + head.next.val;
        
        int n = 0;  // link list size
        ListNode cur = head;
        while (cur != null){
            cur = cur.next;
            n++;
        }
        int[] arr = new int[n];
        while (head != null){
            for (int i=0; i<n; i++){
                arr[i] = head.val;
                head = head.next;
            }
        }
        int maxSum = 0;
        int sum = 0;
        for (int i=0; i<arr.length; i++){
            sum = arr[i] + arr[n-i-1];
            if (sum > maxSum)
                maxSum = sum;
        }
        return maxSum;
    }
}

public int pairSum(ListNode head) {
        int n=0;
        ListNode t=head;
        
        while(t!=null)
        {
            t=t.next;
            n++;
        }
        
        int res=Integer.MIN_VALUE;
        Map<Integer,Integer> m = new HashMap<>();
        int i=0;
        t=head;
        while(i<=(n/2)-1)
        {
            m.put(i,t.val);   
            t=t.next;
            i++;
        }
        
        while(t!=null)
        {
            int j = n-1-i;
            res = Math.max(res,t.val+m.get(j));
            t=t.next;
            i++;
        }
        
        return res;
    }
    
// find the middle of the linked list
// Reverse the list from middle
// Traverse the list until one pointer reaches null
class Solution {

    public int pairSum(ListNode head) {
        
        int max=0;

        //find middle now
        ListNode slow=head;
        ListNode fast=head;
        while (fast.next != null && fast.next.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode reversed = reverse(slow);

        //Even number of nodes so check null only for one.
        while (head != null)
        {
            max = Math.max(head.val +  reversed.val,max);
            head = head.next;
            reversed = reversed.next;
        }

        return max;
    }


    private static ListNode reverse(ListNode head)
    {
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null;

        while (curr != null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
}
