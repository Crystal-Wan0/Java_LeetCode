// Implement the MyStack class:

// void push(int x) Pushes element x to the top of the stack.
// int pop() Removes the element on the top of the stack and returns it.
// int top() Returns the element on the top of the stack.
// boolean empty() Returns true if the stack is empty, false otherwise.
// Notes:

// You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
// Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
    
// LeetCode 225

    Queue<Integer> q1;
    Queue<Integer> q2;
    
    public MyStack() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
    }
    
    public void push(int x) {
        while(!q1.isEmpty()){
            q2.add(q1.poll()); // move everything in q1 to q2 in the same order
        }
        q1.add(x);  // add x in the back
        while(!q2.isEmpty()){
            q1.add(q2.poll());  // move everything back
        }
    }
    
    public int pop() {
        return q1.size()>0 ? q1.poll() : 0;  // make sure not pop an empty list
    }
    
    public int top() {
        return q1.size()>0 ? q1.element() : 0;
    }
    
    public boolean empty() {
        return q1.isEmpty();
    }
