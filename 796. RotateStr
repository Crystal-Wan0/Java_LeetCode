Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.

# A shift on s consists of moving the leftmost character of s to the rightmost position.

# For example, if s = "abcde", then it will be "bcdea" after one shift.
 

# Example 1:

# Input: s = "abcde", goal = "cdeab"
# Output: true
# Example 2:

# Input: s = "abcde", goal = "abced"
# Output: false
    
# 796. Rotate String 

#python
 for i in range(len(s)):
            if len(s)!=len(goal):
                return 0
            
            elif s[i:]==goal[0:(len(s)-i)] and s[0:i]==goal[(len(s)-i):]:
                return 1
 
 #python
 class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        
        tr = s
        rot = s[1:]+s[:1]
        print(rot)
        while rot != tr:
            if rot == goal:
                return 1
            rot = rot[1:]+rot[:1]
        return 0
 
 #python simple:
 def rotateString(self, s: str, goal: str) -> bool:
        ss = list(s)
        gg = list(goal)
        for i in range(len(ss)):
            if ss == gg:
                return True
            else:
                ss.append(ss.pop(0))
        
        return False
