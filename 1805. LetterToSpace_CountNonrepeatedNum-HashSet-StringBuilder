// 1805. Number of Different Integers in a String
// You are given a string word that consists of digits and lowercase English letters.

// You will replace every non-digit character with a space. For example, "a123bc34d8ef34" will become " 123  34 8  34". Notice that you are left with some integers that are separated by at least one space: "123", "34", "8", and "34".

// Return the number of different integers after performing the replacement operations on word.

// Two integers are considered different if their decimal representations without any leading zeros are different.

// Input: word = "a123bc34d8ef34"
// Output: 3
// Explanation: The three different integers are "123", "34", and "8". Notice that "34" is only counted once.

// Input: word = "leet1234code234"
// Output: 2

// Input: word = "a1b01c001"
// Output: 1
// Explanation: The three integers "1", "01", and "001" all represent the same integer because
// the leading zeros are ignored when comparing their decimal values.

class Solution {
    public int numDifferentIntegers(String word) {
        Set<String> set = new HashSet<>();
        int i = 0;
        while(i<word.length()){
            if(Character.isDigit(word.charAt(i))){
                StringBuilder build = new StringBuilder();
                //Remove leading zeros, and if the number is zero it will be represent as a empty string
                while(i<word.length() && word.charAt(i)-'0' == 0){
                    i++;
                }
				// prepare the remaining number
                while(i<word.length() && Character.isDigit(word.charAt(i))){
                    build.append(word.charAt(i)-'0');
                    i++;
                }
				// the number to the set
                set.add(build.toString());
            }
            i++;
        }
		// return size of set, as it contains the actual count of unique numerical strings 
        return set.size();
    }
}
