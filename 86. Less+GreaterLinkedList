// 86. Partition List
// Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

// You should preserve the original relative order of the nodes in each of the two partitions.

// Input: head = [1,4,3,2,5,2], x = 3
// Output: [1,2,2,4,3,5]

// Input: head = [2,1], x = 2
// Output: [1,2]

class Solution {
    public ListNode partition(ListNode head, int x) {
        // if (head == null || head.next == null) return head;
        
        ListNode bHead = new ListNode(0); // the head of the before link list
        ListNode b = bHead;
        ListNode aHead = new ListNode(0); // the head of the after link list
        ListNode a = aHead;
        
        while (head != null){
            if(head.val < x){
                b.next = head;
                b = b.next;
            }
            else {
                a.next = head;
                a = a.next;
            }
            head = head.next;
        }
        a.next = null; // set the after list to an end
        b.next = aHead.next; // point b cur node to the after head (aHead is null)
        return bHead.next;
        
    }
}
