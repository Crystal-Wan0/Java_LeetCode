// 645. Set Mismatch
// You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

// You are given an integer array nums representing the data status of this set after the error.

// Find the number that occurs twice and the number that is missing and return them in the form of an array.

// Input: nums = [1,2,2,4]
// Output: [2,3]

// Input: nums = [1,1]
// Output: [1,2]

class Solution {
    public int[] findErrorNums(int[] nums) {
        int res[] = new int[2];
        for (int i = 0; i < nums.length; i++) {
            int index = Math.abs(nums[i]) - 1;
            if (nums[index] < 0) res[0] = index + 1;
            if (nums[index] > 0) nums[index] = -nums[index];
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) res[1] = i + 1;
        }

        return res;
    }
}
// [1, 2, 2, 4]
// [-1, -2, 2, 4]
// res = [2, 3]
// expect output: [2, 3]


    public int[] findErrorNums(int[] nums)
    {
        int sum=nums.length*(nums.length+1)/2, hashsum=0, duplicate=0;
        HashSet<Integer> set=new HashSet<>();
        for (int n:nums)
        {
            if (!set.contains(n))
            {
                hashsum+=n;
                set.add(n);
            }
            else
                duplicate=n;
        }
        return new int[]{duplicate,sum-hashsum};
    }
