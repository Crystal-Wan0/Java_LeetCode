// 1022. Sum of Root To Leaf Binary Numbers
// You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit.

// For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.
// For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers.

// The test cases are generated so that the answer fits in a 32-bits integer.

// Input: root = [1,0,1,0,1,0,1]
// Output: 22
// Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

// Input: root = [0]
// Output: 0
    
class Solution {
    int sum=0;
    public int sumRootToLeaf(TreeNode root) {
        helper(root,"");
        return sum;
    }
    public void helper(TreeNode root,String s)
    {
        s += Integer.toString(root.val); // convert the int to string, and store it in s
        if(root.left==null && root.right==null)
        {
            sum += Integer.parseInt(s,2);  // when reach the end leaf, convert string to int in binary form
            return;
        }
        if(root.left!=null)
            helper(root.left,s);
        if(root.right!=null)
            helper(root.right,s);
    }
}
