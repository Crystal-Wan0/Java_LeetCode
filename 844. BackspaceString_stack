// 844. Backspace String Compare
// Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

// Note that after backspacing an empty text, the text will continue empty.

// Input: s = "ab#c", t = "ad#c"
// Output: true
// Explanation: Both s and t become "ac".

// Input: s = "ab##", t = "c#d#"
// Output: true
// Explanation: Both s and t become "".

// Input: s = "a#c", t = "b"
// Output: false
// Explanation: s becomes "c" while t becomes "b".

class Solution {
    public boolean backspaceCompare(String s, String t) {
        Stack<Character> s1 = new Stack<>();
        Stack<Character> s2 = new Stack<>();
        for (int i=0; i<s.length();i++){
            if(s.charAt(i) != '#')
                s1.push(s.charAt(i));
            else
                if (!s1.isEmpty())
                    s1.pop();
        }
        for (int i=0; i<t.length();i++){
            if(t.charAt(i) != '#')
                s2.push(t.charAt(i));
            else
                if (!s2.isEmpty())
                    s2.pop();
        }
        return (s1.equals(s2));
    }
}

class Solution {
    public boolean backspaceCompare(String s, String t) {
        Stack<Character> s1=new Stack<>();
        Stack<Character> t1=new Stack<>();
        for(char ch:s.toCharArray()) {  // use ch in char array
            if(ch=='#') {
                if(!s1.isEmpty())
                    s1.pop();
            }
            else
                s1.push(ch);
        }
        for(char ch:t.toCharArray()) {
            if(ch=='#') {
                if(!t1.isEmpty())
                    t1.pop();
            }
            else
                t1.push(ch);
        }
        if(s1.size()!=t1.size())
            return false;
        while(!s1.isEmpty()) {
            if(s1.peek()!=t1.peek())
                return false;
            s1.pop();
            t1.pop();
        }
        return true;
    }
}
