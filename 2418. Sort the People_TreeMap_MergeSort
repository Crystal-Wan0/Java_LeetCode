// 2418. Sort the People
// You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.

// For each index i, names[i] and heights[i] denote the name and height of the ith person.

// Return names sorted in descending order by the people's heights.

// Example 1:
// Input: names = ["Mary","John","Emma"], heights = [180,165,170]
// Output: ["Mary","Emma","John"]
// Explanation: Mary is the tallest, followed by Emma and John.
// Example 2:

// Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]
// Output: ["Bob","Alice","Bob"]
// Explanation: The first Bob is the tallest, followed by Alice and the second Bob.

class Solution {
  public String[] sortPeople(String[] names, int[] heights) {
        Map<Integer, String> map = new TreeMap<>();
        int n = names.length;
        for (int i = 0; i < n; i++) {
            map.put(heights[i], names[i]);
        }
        int i = names.length - 1;
        for (Map.Entry<Integer, String> e : map.entrySet()) {
            String name = e.getValue();
            names[i--] = name;
        }
        return names;
    }
}

class Solution2 {
    public void mergesort(String[] names, int[] heights, int low, int high){
        if(low>=high){
            return;
        }
        int mid = low+(high-low)/2;
        mergesort(names, heights, low, mid);
        mergesort(names, heights, mid+1, high);
        merge(names, heights, low, mid, high);
    }
    
    public void merge(String[] names, int[] heights, int low, int mid, int high){
        int n1 = mid-low+1;
        int n2 = high-mid;
        
        int[] left = new int[n1];
        int[] right = new int[n2];
        
        String[] leftname = new String[n1];
        String[] rightname = new String[n2];
        
        for(int i=0; i<n1; i++){
            left[i] = heights[low+i];
            leftname[i] = names[low+i];
        }
        for(int j=0; j<n2; j++){
            right[j] = heights[mid+1+j];
            rightname[j] = names[mid+1+j];
        }
        
        int i=0;
        int j=0;
        int k=low;
        
        while(i<n1 && j<n2){
            if(left[i]<=right[j]){
                names[k] = leftname[i];
                heights[k] = left[i];
                i++;
            }else{
                names[k] = rightname[j];
                heights[k] = right[j];
                j++;
            }
            k++;
        }
        while(i<n1){
            names[k] = leftname[i];
            heights[k] = left[i];
            i++;
            k++;
        }
        while(j<n2){
            names[k] = rightname[j];
            heights[k] = right[j];
            j++;
            k++;
        }
    }
    
    public void reverse(String[] names, int low, int high){
        if(low>=high){
            return;
        }
        String tem = names[low];
        names[low] = names[high];
        names[high] = tem;
        reverse(names, low+1, high-1);
    }
    public String[] sortPeople(String[] names, int[] heights) {
        mergesort(names, heights, 0, heights.length-1);
        reverse(names, 0, names.length-1);
        return names;
    }
}
