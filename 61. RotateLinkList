// 61. Rotate List
// Given the head of a linked list, rotate the list to the right by k places.

// Input: head = [1,2,3,4,5], k = 2
// Output: [4,5,1,2,3]

// Input: head = [0,1,2], k = 4
// Output: [2,0,1]



class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        ListNode dummy = new ListNode();
        ListNode fast = head;
        ListNode slow = head;
        
        if (head == null || head.next == null || k==0)
            return head;
        
        for (int i=0; i<k; i++){
            if (fast.next == null) 
                fast = head;
            else
                fast = fast.next;

        }
        
        while (fast.next != null){
            fast = fast.next;
            slow = slow.next;
        }
        
        dummy.next = slow.next; // set the first node to 4
        slow.next = null; // set 3 point to null
        fast.next = head;  // set 5 point to 1

        return dummy.next;
    }
}
// wouldn't pass:
// Input
// [1,2], k = 2
// Output
// []
// Expected
// [1,2]

class Solution {
    
    public ListNode rotateRight(ListNode head, int k) {
        
        if (head == null || head.next == null || k == 0) {
            
            return head;
        }
        
        ListNode current = head;
        
        int size = 1;
        
        // Walk to second last node (till current.next != null) and get size of list
        while (current.next != null) {
            
            size++;
            current = current.next;
        }
        
        // once you are at last node, point next of last node to head
        current.next = head;
        
        // find the break point of list and break the link
        int breakPoint = size - (k % size);
        
        // walk to reach break point
        while (breakPoint > 0) {
        
            current = current.next;
            breakPoint--;
        }
        
        // break the link and return new head 
        head = current.next;
        current.next = null;
        
        return head;
    }
}

