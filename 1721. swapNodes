// 1721. Swapping Nodes in a Linked List
// You are given the head of a linked list, and an integer k.

// Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).

// Input: head = [1,2,3,4,5], k = 2
// Output: [1,4,3,2,5]

// Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
// Output: [7,9,6,6,8,7,3,0,9,5]

class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        if(head == null || head.next == null) return head;
        
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode slow = dummy;
        ListNode fast = dummy;
        ListNode nthNode = dummy;
        
        for(int i = 0; i<k; i++){                            //Finding nth Node from start
            nthNode = nthNode.next;
            fast = fast.next;
        }
        
        while(fast!=null){                       //Finding nth Node from end
            fast = fast.next;
            slow = slow.next;
        }
        
        int temp = nthNode.val;          //Swapping
        nthNode.val = slow.val;
        slow.val = temp;
        return dummy.next;
    }
}
