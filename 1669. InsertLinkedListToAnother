// 1669. Merge In Between Linked Lists
// You are given two linked lists: list1 and list2 of sizes n and m respectively.

// Remove list1's nodes from the ath node to the bth node, and put list2 in their place.

// The blue edges and nodes in the following figure indicate the result:


// Build the result list and return its head.

// Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
// Output: [0,1,2,1000000,1000001,1000002,5]
// Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.

// Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]
// Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]
// Explanation: The blue edges and nodes in the above figure indicate the result.

class Solution {
	public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
		ListNode temp = list1;
		int cnt = 1;
		while(cnt != a){
			temp = temp.next;
			cnt++;
		}
		ListNode tail = temp.next;

		while(cnt != b+1){
			tail = tail.next;
			cnt++;
		}

		temp.next = list2;
		while(list2.next != null){
			list2 = list2.next;
		}
		list2.next = tail;

		return list1;
	}
}

class Solution {
    public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
        ListNode lista = list1;
        ListNode attach1 = null;
        ListNode attach2 = null;
        for(int i = 0; i < b + 2; i++){
            if(i == a - 1){
                attach1 = lista;
            }
            if(i == b + 1){
                attach2 = lista;
            }
             lista = lista.next;
        }
        ListNode listb = list2;
        while(listb.next != null){
            listb = listb.next;
        }
        attach1.next = list2;
        listb.next = attach2;
        return list1;
    }
}
