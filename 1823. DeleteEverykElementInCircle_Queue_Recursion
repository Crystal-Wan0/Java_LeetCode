// 1823. Find the Winner of the Circular Game
// There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.

// The rules of the game are as follows:

// Start at the 1st friend.
// Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
// The last friend you counted leaves the circle and loses the game.
// If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
// Else, the last friend in the circle wins the game.
// Given the number of friends, n, and an integer k, return the winner of the game.

// Input: n = 5, k = 2
// Output: 3
// Explanation: Here are the steps of the game:
// 1) Start at friend 1.
// 2) Count 2 friends clockwise, which are friends 1 and 2.
// 3) Friend 2 leaves the circle. Next start is friend 3.
// 4) Count 2 friends clockwise, which are friends 3 and 4.
// 5) Friend 4 leaves the circle. Next start is friend 5.
// 6) Count 2 friends clockwise, which are friends 5 and 1.
// 7) Friend 1 leaves the circle. Next start is friend 3.
// 8) Count 2 friends clockwise, which are friends 3 and 5.
// 9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.

// Input: n = 6, k = 5
// Output: 1
// Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.

// queue
class Solution {
    public int findTheWinner(int n, int k) {
        // ArrayList<Integer> list = new ArrayList<>();
        // for (int i=1; i<=n; i++){
        //     list.add(i);
        // }
        // while(list.size()>1){
        //     int i=-1;
        //     i += k;
        //     if(i>=list.size())
        //         i = 0;
        //     list.remove(i);
        // }
        // return list.get(0);
        
        Queue<Integer> queue=new LinkedList<>();
        for(int i=1;i<=n;i++){
            queue.add(i);  // queue is now 5 4 3 2 1 
        }
        boolean front=false;
        while(queue.size()!=1){
            if(front==false){
                int t=k-1;
                while(t>0){
                    queue.add(queue.poll());  // place the last item front
                    t--;
                }
                front=true;
            }else{
                queue.poll();
                front=false;
            }
        }
        return queue.poll(); 
    }
}

// recursion
class Solution {
    public int findTheWinner(int n, int k) {
        if(n == 1) return 1;
        return 1 + (findTheWinner(n - 1, k) + k - 1) % n;
    }
}

