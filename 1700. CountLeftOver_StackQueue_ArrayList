// 1700. Number of Students Unable to Eat Lunch
// The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

// The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:

// If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
// Otherwise, they will leave it and go to the queue's end.
// This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

// You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the ith sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the jth student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.
// Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
// Output: 0 
// Explanation:
// - Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].
// - Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].
// - Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].
// - Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].
// - Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].
// - Front student leaves the top sandwich and returns to the end of the line making students = [0,1].
// - Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].
// - Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].
// Hence all students are able to eat.

// Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
// Output: 3
// 【1，1，0，0，1】 [0,0,0,1,1]
// [0 0 1 1 1]
// [0 1 1 1]   [0 0 1 1]
// [1 1 1]  [0 1 1]

class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        Queue<Integer> q = new LinkedList<>();
        Stack<Integer> s = new Stack<>();
        for (int i = sandwiches.length - 1; i >= 0; i--) {
            s.add(sandwiches[i]);
        }
        for (int student : students) {
            q.add(student);
        }
        int count = 0;
        while (s.size() != 0) {
            if (Objects.equals(s.peek(), q.peek())) {
                count = 0;
                s.pop();
                q.poll();
            } else {
                int top = q.poll();
                q.add(top);
                count++;
            }

            if (count == q.size()) {
                return count;
            }
        }

        return 0;
    }
}

// ArrayList
class Solution {
  public int countStudents(int[] students, int[] sandwiches) {
    ArrayList stal = new ArrayList<>(),
    swal = new ArrayList<>();

    for(Integer i:students){
        stal.add(i);
    }        
    for(Integer i:sandwiches){
        swal.add(i);
    }
    
    int key = 0;
    while(key<stal.size()){
        if(stal.get(0)==swal.get(0)){
            stal.remove(0);
            swal.remove(0);
            key=0;
            continue;
        }
        key++;
        int temp = stal.get(0); // move the stal.get(0) to the end of the arrayList
        stal.remove(0);
        stal.add(temp);
    }        
    return stal.size();
  }
}
