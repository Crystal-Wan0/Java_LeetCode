/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 * 7 -> 0 -> 8 +
 * 5 -> 3 -> 1
 * =>
 * 2 -> 4 -> 9
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        return recursion (l1, l2, 0);               
    }
    public ListNode recursion(ListNode l1, ListNode l2, int carry) {
        if (l1 == null && l2 == null) {
            if (carry != 0)
                return new ListNode(carry);
            else
                return null;
                
        }
        
        int v1 = l1 == null ? 0 : l1.val;
        int v2 = l2 == null ? 0 : l2.val;
        int s = v1 + v2 + carry;
        int val = s % 10;
        int mod = s / 10;
        
        return new ListNode(val, recursion(l1==null?null:l1.next, l2==null?null:l2.next, mod));
    }
}
