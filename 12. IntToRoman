// Symbol       Value
// I             1
// V             5
// X             10
// L             50
// C             100
// D             500
// M             1000
// For example, 2 is written as II in Roman numeral, just two one's added together. 
// 12 is written as XII, which is simply X + II. 
// The number 27 is written as XXVII, which is XX + V + II.
    
// I can be placed before V (5) and X (10) to make 4 and 9. 
// X can be placed before L (50) and C (100) to make 40 and 90. 
// C can be placed before D (500) and M (1000) to make 400 and 900
    

// Input: num = 3
// Output: "III"
// Explanation: 3 is represented as 3 ones.
// Example 2:

// Input: num = 58
// Output: "LVIII"
// Explanation: L = 50, V = 5, III = 3.
// Example 3:

// Input: num = 1994
// Output: "MCMXCIV"
// Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.

// 1 <= num <= 3999

// 12. Integer to Roman

class Solution {
    public String intToRoman(int num) {
    String res = "";
    LinkedHashMap<Integer,String> map = new LinkedHashMap<>();
    
    map.put(1000,"M");
    map.put(900,"CM");
    map.put(500,"D");
    map.put(400,"CD");
    map.put(100,"C");
    map.put(90,"XC");
    map.put(50,"L");
    map.put(40,"XL");
    map.put(10,"X");
    map.put(9,"IX");
    map.put(5,"V");
    map.put(4,"IV");
    map.put(1,"I");
    
    while(num > 0){
        for(int i : map.keySet()){  // i is the keyword in the map
            if(num >= i){
                res += map.get(i);  // get the string
                num -=  i;
                break;
            }
        }
    }
    
    return res;  
    }
}

# Another solution:
def to_roman(num):
    # Write your code here
    m = ["", "M", "MM", "MMM"]
    c = ["", "C", "CC", "CCC", "CD", "D",
         "DC", "DCC", "DCCC", "CM "]
    x = ["", "X", "XX", "XXX", "XL", "L",
         "LX", "LXX", "LXXX", "XC"]
    i = ["", "I", "II", "III", "IV", "V",
         "VI", "VII", "VIII", "IX"]
  
    thousands = m[num // 1000]
    hundreds = c[(num % 1000) // 100]
    tens = x[(num % 100) // 10]
    ones = i[num % 10]
  
    r = (thousands + hundreds +
           tens + ones)
  
    return r
