// Given an array nums of size n, return the majority element.

// The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

// Input: nums = [3,2,3]
// Output: 3
    
// Input: nums = [2,2,1,1,1,2,2]
// Output: 2
    
// 169. Majority Element

class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> countEle = new HashMap<>();
        if (nums.length < 2)
            return nums[0];
        for (int i: nums){
            if (countEle.containsKey(i) && countEle.get(i) + 1 > nums.length/2) { // the plus one update the value here instead down there
                return i;
                
            }
            else
                countEle.put(i, countEle.getOrDefault(i, 0) + 1); // get the value update by 1 or when the key doesn't exited just add 1 to 0
        }
        return -1;
    }
}

// Another solution:
public int majorityElement(int[] nums) {
        int element = 0;
        int count = 0;
        for(int i=0;i<nums.length;i++)
        {
            if(count == 0)
                element = nums[i];
            if(element == nums[i])
                count++;
            else
                count--;
        }
        return element;
    }
    
// same as the last one:
class Solution {
    public int majorityElement(int[] nums) {
          int count = 0;
    int  check = 0;

        for (int i=0;i<nums.length;i++) {
            if (count == 0) {
                check = nums[i];
            }
            count += (nums[i] == check) ? 1 : -1;
        }

        return check;
    
    }
}
