// Input: head = [0,3,1,0,4,5,2,0]
// Output: [4,11]
// Explanation: 
// The above figure represents the given linked list. The modified list contains
// - The sum of the nodes marked in green: 3 + 1 = 4.
// - The sum of the nodes marked in red: 4 + 5 + 2 = 11.

// Input: head = [0,1,0,3,0,2,2,0]
// Output: [1,3,4]
// Explanation: 
// The above figure represents the given linked list. The modified list contains
// - The sum of the nodes marked in green: 1 = 1.
// - The sum of the nodes marked in red: 3 = 3.
// - The sum of the nodes marked in yellow: 2 + 2 = 4.
    
// 2181. Merge Nodes in Between Zeros

class Solution {
    public ListNode mergeNodes(ListNode head) {
        ListNode cur = head;
        
        ListNode cur1 = head;
        int sum = 0;
        
        while(cur != null){
            if(cur.val == 0 && sum!= 0){
                cur1 = cur1.next; // cur1.val now is head which is 0
                cur1.val = sum;
                sum = 0;
            }else{
                sum += cur.val;
            }
            cur = cur.next;
        }
        cur1.next = null;
        head = head.next; // delete the first 0
        return head;
    }
}
