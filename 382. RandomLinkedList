// 382. Linked List Random Node
// Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

// Implement the Solution class:

// Solution(ListNode head) Initializes the object with the head of the singly-linked list head.
// int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.

// Input
// ["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"]
// [[[1, 2, 3]], [], [], [], [], []]
// Output
// [null, 1, 3, 2, 2, 3]

// Explanation
// Solution solution = new Solution([1, 2, 3]);
// solution.getRandom(); // return 1
// solution.getRandom(); // return 3
// solution.getRandom(); // return 2
// solution.getRandom(); // return 2
// solution.getRandom(); // return 3

class Solution {
    List<Integer> list;
    int size;
    public Solution(ListNode head) {
        list = new ArrayList<>();
        while(head != null){
            list.add(head.val);
            head = head.next;
        }
        this.size = list.size();
    }
    
    public int getRandom() {
        int index = (int) (Math.random() * size);  // Math.random() return 0 to 1 (0 included)
        return list.get(index);
    }
}

class Solution {
    public int size = 0;
    ListNode curr;
    public Solution(ListNode head) {
        curr = head;
        while (curr.next != null){
            curr = curr.next;
            size++;
        }
        curr.next = head;
        curr = curr.next;
        size++;
    }

    public int getRandom() {
        ListNode temp = curr;
        Random rand = new Random();
        int count = rand.nextInt(size),i = 0; // count would be 0 to (size-1)
        while (i != count){
            temp = temp.next;
            i++;
        }
        return temp.val;
    }
}
