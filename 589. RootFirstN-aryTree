// 589. N-ary Tree Preorder Traversal
// Given the root of an n-ary tree, return the preorder traversal of its nodes' values.

// Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

// Input: root = [1,null,3,2,4,null,5,6]
// Output: [1,3,5,6,2,4]

// Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
// Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]

class Solution {
    List<Integer> res = new ArrayList<>();
    public List<Integer> preorder(Node root) {
        if(root == null) return res;
        res.add(root.val);
        List<Node> list = root.children;
        for(int i = 0; i < list.size(); i ++){
            preorder(list.get(i));
        }
        return res;
    }
}

class Solution {
    List<Integer> result = new ArrayList<>();

    public List<Integer> preorder(Node root) {
        if (root != null) {
            result.add(root.val);
            for (Node node : root.children) {
                preorder(node);
            }
        }
        return result;
    }
}
