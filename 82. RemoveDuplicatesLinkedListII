// 82. Remove Duplicates from Sorted List II
// Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

// Input: head = [1,2,3,3,4,4,5]
// Output: [1,2,5]

// Input: head = [1,1,1,2,3]
// Output: [2,3]

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next== null) return head;

        ListNode dummy = new ListNode();
        dummy.next = head;
        ListNode prev = dummy, cur = head;

        while (cur != null){
            if (cur.next != null && cur.val == cur.next.val) {
                while (cur.next != null && cur.val == cur.next.val){
                    cur = cur.next;  // find the node that's not equal
                }
                prev.next = cur.next;  // prev point to the node that is not equal
            }
            else {
                prev = cur;
            }
            cur = cur.next;
        }
        return dummy.next;
    }
}
