// 938. Range Sum of BST
// Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

// Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
// Output: 32
// Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.

// Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
// Output: 23
// Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.
    
class Solution {
    int sum = 0;
    public int rangeSumBST(TreeNode root, int low, int high) {
        if (root == null) return 0;
        if (root.val >=low && root.val <= high) {
            sum += root.val;
            rangeSumBST(root.left, low, high);
            rangeSumBST(root.right, low, high);
        }
        else if(root.val < low) 
            rangeSumBST(root.right, low, high);
        else
            rangeSumBST(root.left, low, high);
        
        return sum;
        
    }
}

class Solution {
    private static int low, high;
    
    public int rangeSumBST(TreeNode root, int low, int high) {
        Solution.low = low;
        Solution.high = high;
        
        return rangeSumBST(root);
    }
    
    public int rangeSumBST(TreeNode root){
        if( root==null )
            return 0;
        
        int call = rangeSumBST(root.left) + rangeSumBST(root.right);
        
        return ( root.val>=low &&  root.val<=high )? root.val + call : call ;
    }
}
